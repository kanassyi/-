import numpy as np
import sounddevice as sd

fs = 44100  # サンプリングレート

# ms をサンプル数に変換する関数
def ms_to_samples(ms, fs=44100):
    return int(round(fs * ms / 1000))

def square_wave(frequency, duration_ms, duty=0.5, fs=44100):
    n_samples = ms_to_samples(duration_ms, fs)
    t = np.arange(n_samples) / fs
    wave = 0.5 * np.where((t * frequency) % 1 < duty, 1.0, -1.0)
    return wave

def triangle_wave(frequency, duration_ms, fs=44100):
    n_samples = ms_to_samples(duration_ms, fs)
    t = np.arange(n_samples) / fs
    wave = 2 * np.abs(2 * (t * frequency % 1) - 1) - 1
    return wave * 1.2

def rest(duration_ms, fs=44100):
    return np.zeros(ms_to_samples(duration_ms, fs))


# 音階辞書
notes = {
# 低音ベース用
    "D2": 73,
    "E2": 82,
    "F#2": 92,
    "G2": 98,
    "A2": 110,
    "B2": 123,
    "C#3": 138,
    "D3": 146,  # 伴奏でも使用

    # 伴奏用（中〜高音域）
    "E3": 165,
    "F#3": 185,
    "G3": 196,
    "A3": 220,
    "B3": 247,
    "C#4": 277,
    "D4": 293,
    "E4": 330,
    "F#4": 370,
    "G4": 392,
    "A4": 440,
    "B4": 494,

    # メロディ用（高音域 D5～B5）
    "D5": 587,
    "E5": 659,
    "F#5": 740,
    "G5": 784,
    "A5": 880,
    "B5": 988,
}

# BPM設定
BPM = 120
quarter_note_ms = 60000 / BPM  # 4分音符/ms = 60000ms/BPM

# 音価を文字で表現（BPM連動）
durations = {
    "shi": quarter_note_ms,       # 4分音符
    "ha": quarter_note_ms / 2,    # 8分音符
    "ni": quarter_note_ms * 2,    # 2分音符
    "zen": quarter_note_ms * 4,    # 全音符
    "ju": quarter_note_ms / 4,    # 16分音符
}

# 音価計算関数（付点や三連符にも対応）
def get_duration(note_val):
    if note_val.endswith('.'):  # 付点
        base = note_val[:-1]
        return durations[base] * 1.5
    elif note_val.endswith('3'): # 三連符
        base = note_val[:-1]
        return durations[base] / 3
    else:
        return durations[note_val]

# メロディ
melody = [
    ("A5", "ha"), ("A5", "shi"), ("B5", "ha"), ("A5", "ha"), ("F#5", "ha"), ("A5", "ha"),("REST", "ha"),
    ("A5", "ha"), ("A5", "shi"), ("B5", "ha"), ("A5", "ha"), ("F#5", "ha"), ("A5", "ha"),("REST", "ha"), 
    ("D5", "ha"), ("D5", "ha"), ("D5", "ha"), ("E5", "ha"), ("F#5", "shi."),  ("D5", "ha"),
    ("F#5", "shi."), ("A5", "ha"),("A5", "shi."),("REST", "ha."), 
    ("D5", "ha"), ("D5", "ha"), ("D5", "ha"), ("E5", "ha"), ("F#5", "shi."),("REST", "ha"),
    ("D5", "ha"), ("D5", "ha"), ("D5", "ha"), ("E5", "ha"), ("F#5", "shi."),("REST", "ha"),
    ("E5", "ha"), ("E5", "ha"), ("E5", "ha"), ("D5", "ha"), ("E5", "ha."),("REST", "ju"),  ("F#5", "ha."),("REST", "ju"), 
    ("A5", "ha."),("REST", "ju"),  ("G5", "ha."),("REST", "ju"),  ("F#5", "ha."),("REST", "ju"), ("E5", "ha"),  ("REST", "ha"), 
    ("A5", "ha"), ("A5", "shi"), ("B5", "ha"), ("A5", "ha"), ("F#5", "ha"), ("A5", "ha"),("REST", "ha"),
    ("A5", "ha"), ("A5", "shi"), ("B5", "ha"), ("A5", "ha"), ("F#5", "ha"), ("E5", "ha"),("REST", "ha"),
    ("D5", "zen")
]

# 伴奏3声
mezzo = [
    ("REST", "ha"), ("F#4", "ha"), ("REST", "ha"),("F#4", "ha"),("REST", "ha"), ("F#4", "ha"), ("REST", "ha"),("F#4", "ha"),
    ("REST", "ha"), ("F#4", "ha"), ("REST", "ha"),("F#4", "ha"),("REST", "ha"), ("F#4", "ha"), ("REST", "ha"),("F#4", "ha"),
    ("REST", "ha"), ("F#4", "ha"), ("REST", "ha"),("F#4", "ha"),("REST", "ha"), ("F#4", "ha"), ("REST", "ha"),("F#4", "ha"),
    ("REST", "ha"), ("F#4", "ha"), ("REST", "ha"),("F#4", "ha"),("REST", "ha"), ("F#4", "ha"), ("REST", "ha"),("F#4", "ha"),
    ("REST", "ha"), ("D4", "ha"),("REST", "ha"), ("D4", "ha"),("REST", "ha"), ("D4", "ha"),("REST", "ha"), ("D4", "ha"),
    ("REST", "ha"), ("D4", "ha"),("REST", "ha"), ("D4", "ha"),("REST", "ha"), ("D4", "ha"),("REST", "ha"), ("D4", "ha"),
    ("REST", "ha"), ("E4", "ha"),("REST", "ha"), ("E4", "ha"),("REST", "ha"), ("E4", "ha"),("REST", "ha"), ("E4", "ha"),
    ("REST", "ha"), ("E4", "ha"),("REST", "ha"), ("E4", "ha"),("REST", "ha"), ("E4", "ju"),("E4", "ju"),("REST", "ha"), ("E4", "ha"),
    ("REST", "ha"), ("F#4", "ha"), ("REST", "ha"),("F#4", "ha"),("REST", "ha"), ("F#4", "ha"), ("REST", "ha"),("F#4", "ha"),
    ("REST", "ha"), ("F#4", "ha"), ("REST", "ha"),("F#4", "ha"),("REST", "ha"), ("F#4", "ha"), ("REST", "ha"),("F#4", "ha"),
    ("F#4", "zen")
]

alto = [
    ("REST", "ha"), ("D4", "ha"), ("REST", "ha"),("D4", "ha"),("REST", "ha"), ("D4", "ha"), ("REST", "ha"),("D4", "ha"),
    ("REST", "ha"), ("D4", "ha"), ("REST", "ha"),("D4", "ha"),("REST", "ha"), ("D4", "ha"), ("REST", "ha"),("D4", "ha"),
    ("REST", "ha"), ("D4", "ha"),("REST", "ha"), ("D4", "ha"),("REST", "ha"), ("D4", "ha"),("REST", "ha"), ("D4", "ha"),
    ("REST", "ha"), ("D4", "ha"),("REST", "ha"), ("D4", "ha"),("REST", "ha"), ("D4", "ha"),("REST", "ha"), ("D4", "ha"),
    ("REST", "ha"), ("B3", "ha"),("REST", "ha"), ("B3", "ha"),("REST", "ha"), ("B3", "ha"),("REST", "ha"), ("B3", "ha"),
    ("REST", "ha"), ("B3", "ha"),("REST", "ha"), ("B3", "ha"),("REST", "ha"), ("B3", "ha"),("REST", "ha"), ("B3", "ha"),
    ("REST", "ha"), ("C#4", "ha"),("REST", "ha"), ("C#4", "ha"),("REST", "ha"), ("C#4", "ha"),("REST", "ha"), ("C#4", "ha"),
    ("REST", "ha"), ("C#4", "ha"),("REST", "ha"), ("C#4", "ha"),("REST", "ha"), ("C#4", "ju"),("C#4", "ju"),("REST", "ha"), ("C#4", "ha"),
    ("REST", "ha"), ("D4", "ha"), ("REST", "ha"),("D4", "ha"),("REST", "ha"), ("D4", "ha"), ("REST", "ha"),("D4", "ha"),
    ("REST", "ha"), ("D4", "ha"), ("REST", "ha"),("D4", "ha"),("REST", "ha"), ("D4", "ha"), ("REST", "ha"),("D4", "ha"),
    ("D4", "zen")
]

tenor = [
    ("REST", "ha"), ("A3", "ha"),("REST", "ha"), ("A3", "ha"),("REST", "ha"), ("A3", "ha"),("REST", "ha"), ("A3", "ha"),
    ("REST", "ha"), ("A3", "ha"),("REST", "ha"), ("A3", "ha"),("REST", "ha"), ("A3", "ha"),("REST", "ha"), ("A3", "ha"),
    ("REST", "ha"), ("B3", "ha"),("REST", "ha"), ("B3", "ha"),("REST", "ha"), ("B3", "ha"),("REST", "ha"), ("B3", "ha"),
    ("REST", "ha"), ("B3", "ha"),("REST", "ha"), ("B3", "ha"),("REST", "ha"), ("B3", "ha"),("REST", "ha"), ("B3", "ha"),
    ("REST", "ha"), ("G3", "ha"),("REST", "ha"), ("G3", "ha"),("REST", "ha"), ("G3", "ha"),("REST", "ha"), ("G3", "ha"),
    ("REST", "ha"), ("G3", "ha"),("REST", "ha"), ("G3", "ha"),("REST", "ha"), ("G3", "ha"),("REST", "ha"), ("G3", "ha"),
    ("REST", "ha"), ("A3", "ha"),("REST", "ha"), ("A3", "ha"),("REST", "ha"), ("A3", "ha"),("REST", "ha"), ("A3", "ha"),
    ("REST", "ha"), ("A3", "ha"),("REST", "ha"), ("A3", "ha"),("REST", "ha"), ("A3", "ju"),("A3", "ju"),("REST", "ha"), ("A3", "ha"),
    ("REST", "ha"), ("A3", "ha"),("REST", "ha"), ("A3", "ha"),("REST", "ha"), ("A3", "ha"),("REST", "ha"), ("A3", "ha"),
    ("REST", "ha"), ("A3", "ha"),("REST", "ha"), ("A3", "ha"),("REST", "ha"), ("A3", "ha"),("REST", "ha"), ("A3", "ha"),
    ("A3", "zen")
]


# ベース
bass_line = [
    ("D3", "ha"),("REST", "ha"), ("A2", "ha"), ("REST", "ha"),("D3", "ha"),("REST", "ha"), ("A2", "ha"), ("REST", "ha"),
    ("D3", "ha"),("REST", "ha"), ("A2", "ha"), ("REST", "ha"),("D3", "ha"),("REST", "ha"), ("D3", "ha"), ("C#3", "ha"),
    ("B2", "ha"),("REST", "ha"), ("F#2", "ha"), ("REST", "ha"),("B2", "ha"),("REST", "ha"), ("F#2", "ha"), ("REST", "ha"),
    ("B2", "ha"),("REST", "ha"), ("F#2", "ha"), ("REST", "ha"),("B2", "ha"),("REST", "ha"), ("B2", "ha"), ("A2", "ha"),
    ("G2", "ha"),("REST", "ha"), ("D2", "ha"), ("REST", "ha"),("G2", "ha"),("REST", "ha"), ("D3", "ha"), ("REST", "ha"),
    ("G2", "ha"),("REST", "ha"), ("D2", "ha"), ("REST", "ha"),("G2", "ha"),("REST", "ha"), ("G2", "ha"), ("REST", "ha"),
    ("A2", "ha"),("REST", "ha"), ("E2", "ha"), ("REST", "ha"),("A2", "ha"),("REST", "ha"), ("E2", "ha"), ("REST", "ha"),
    ("A2", "ha"),("REST", "ha"), ("E2", "ha"), ("REST", "ha"),("A2", "ha"),("REST", "ha"), ("B2", "ha"), ("C#3", "ha"),
    ("D3", "ha"),("REST", "ha"), ("A2", "ha"), ("REST", "ha"),("D3", "ha"),("REST", "ha"), ("A2", "ha"), ("REST", "ha"),
    ("D3", "ha"),("REST", "ha"), ("A2", "ha"), ("REST", "ha"),("D3", "ha"),("REST", "ha"), ("A2", "ha"), ("REST", "ha"),
    ("D3", "zen"),
]

# 最後に挿入する休符（音の切れ目用）
cut_rest = 13  # ms

# メロディー1声目波形
line1 = np.concatenate([
    rest(get_duration(d) + cut_rest) if n == "REST" else np.concatenate([square_wave(notes[n], get_duration(d), duty=0.25),
    rest(cut_rest)
    ])
    for n, d in melody
])

# メロディー2声目波形
line2 = np.concatenate([
    rest(get_duration(d) + cut_rest) if n == "REST" else np.concatenate([square_wave(notes[n], get_duration(d), duty=0.75),
    rest(cut_rest)
    ])
    for n, d in melody
])

# メロディ2声を重ねる（音量を下げてクリップ防止）
song = (line1 + line2) / 2.0


# mezzoの波形
voice1 = np.concatenate([
    rest(get_duration(d) + cut_rest) if n == "REST" else np.concatenate([square_wave(notes[n], get_duration(d), duty=0.25),
    rest(cut_rest)
    ])
    for n, d in mezzo
])

# altoの波形
voice2 = np.concatenate([
    rest(get_duration(d) + cut_rest) if n == "REST" else np.concatenate([square_wave(notes[n], get_duration(d), duty=0.25),
    rest(cut_rest)
    ])
    for n, d in alto
])

# tenorの波形
voice3 = np.concatenate([
    rest(get_duration(d) + cut_rest) if n == "REST" else np.concatenate([square_wave(notes[n], get_duration(d), duty=0.25),
    rest(cut_rest)
    ])
    for n, d in tenor
])

# 3声を重ねる（音量を下げてクリップ防止）
chord = (voice1 + voice2 +voice3) / 3.0

# ベースの波形
bass = np.concatenate([
    np.concatenate([triangle_wave(notes[n], get_duration(d)), rest(cut_rest)]) if n != "REST"
    else rest(get_duration(d) + cut_rest)
    for n, d in bass_line
])

# 主旋律・伴奏・ベースを重ねる（音量を下げてクリップ防止）
max_len = max(len(song), len(chord), len(bass))

# パートの長さを揃える（ゼロ埋め）
max_len = max(len(song), len(chord), len(bass))
song = np.pad(song, (0, max_len - len(song)))
chord = np.pad(chord, (0, max_len - len(chord)))
bass = np.pad(bass, (0, max_len - len(bass)))

# 一まとめにする
yobikomi = (song + chord + bass) / 3.0


# 再生
sd.play(yobikomi, fs)
sd.wait()
